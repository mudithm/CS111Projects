Total: 1376 samples
    1143  83.1%  83.1%     1376 100.0% listAdd_spin
     184  13.4%  96.4%      184  13.4% __strcmp_sse42
      28   2.0%  98.5%      117   8.5% SortedList_lookup
      17   1.2%  99.7%      116   8.4% SortedList_insert
       2   0.1%  99.9%        2   0.1% __GI__IO_fflush
       2   0.1% 100.0%        2   0.1% _init
       0   0.0% 100.0%     1376 100.0% __clone
       0   0.0% 100.0%     1376 100.0% start_thread
ROUTINE ====================== listAdd_spin in /u/cs/ugrad/mudith/Documents/CS111Projects/Lab2B/lab2_list.c
  1143   1376 Total samples (flat / cumulative)
     .      .  263:     }
     .      .  264: }
     .      .  265: 
     .      .  266: // Makes and deletes lists, with spin lock
     .      .  267: void listAdd_spin(int *offset)
---
     .      .  268: {
     .      .  269:     struct timespec spin_start, spin_end;
     .      .  270:     long long spin_start_time, spin_end_time;
     .      .  271: 
     .      .  272:     Sublist_t *list;
     .      .  273:     SortedList_t *head;
     .      .  274: 
     .      .  275:     for (int i = *offset; i < numIterations + *offset; i++)
     .      .  276:     {
     .      .  277:         list = &(sublist_array[hash(list_array[i].key) % numSublists]);
     .      .  278:         head = &(list->list_head);
     .      .  279: 
     .      .  280:         //printf("Adding #%d: %s to sublist #%ld\n", i, list_array[i].key, hash(list_array[i].key) % numSublists);
     .      .  281:         //fflush(stdout);
     .      .  282: 
     .      .  283:         //spin lock
     .      .  284:         clock_gettime(CLOCK_MONOTONIC, &spin_start);
     .      .  285:         spin_start_time = spin_start.tv_sec * 1000000000 + spin_start.tv_nsec;
     .      .  286: 
   532    532  287:         while (__sync_lock_test_and_set(&(list->spin_lock), 1))
     3      3  288:             continue;
     .      .  289: 
     .      .  290:         clock_gettime(CLOCK_MONOTONIC, &spin_end);
     .      .  291:         spin_end_time = spin_end.tv_sec * 1000000000 + spin_end.tv_nsec;
     .      .  292:         protected_wait_time += (spin_end_time - spin_start_time);
     .      .  293: 
     .      .  294: 
     .    116  295:         SortedList_insert(head, &list_array[i]);
     .      .  296:         //print2List(head);
     .      .  297: 
     .      .  298: 
     .      .  299: 
     .      .  300:         __sync_lock_release(&(list->spin_lock));
     .      .  301: 
     .      .  302:     }
     .      .  303: 
     .      .  304:     // check length of list
     .      .  305:     int len = 0;
     .      .  306: 
     .      .  307:     for (int i = 0; i < numSublists; i++)
     .      .  308:     {
     .      .  309:         list = &(sublist_array[i]);
     .      .  310:         head = &(list->list_head);
     .      .  311: 
     .      .  312:         clock_gettime(CLOCK_MONOTONIC, &spin_start);
     .      .  313:         spin_start_time = spin_start.tv_sec * 1000000000 + spin_start.tv_nsec;
     .      .  314: 
     .      .  315:         while (__sync_lock_test_and_set(&(list->spin_lock), 1))
     .      .  316:             continue;
     .      .  317: 
     .      .  318:         clock_gettime(CLOCK_MONOTONIC, &spin_end);
     .      .  319:         spin_end_time = spin_end.tv_sec * 1000000000 + spin_end.tv_nsec;
     .      .  320:         protected_wait_time += (spin_end_time - spin_start_time);
     .      .  321: 
     .      .  322:         int temp_len = SortedList_length(head);
     .      .  323: 
     .      .  324:         __sync_lock_release(&(list->spin_lock));
     .      .  325: 
     .      .  326:         if (temp_len < 0)
     .      .  327:         {
     .      .  328:             fprintf(stderr, "Corrupted list!\n");
     .      .  329: 	    free(list_array);
     .      .  330: 	    free(sublist_array);
     .      .  331: 	    exit(2);
     .      .  332:         }
     .      .  333: 
     .      .  334:         len += temp_len;
     .      .  335:     }
     .      .  336: 
     .      .  337: 
     .      .  338: 
     .      .  339:     //delete all added elements
     .      .  340: 
     .      .  341:     for (int i = *offset; i < numIterations + *offset; i++)
     .      .  342:     {
     .      .  343:         //printf("removing #%d: %s\n", i, list_array[i].key);
     .      .  344:         //fflush(stdout);
     .      .  345:         //mutex lock
     .      .  346:         //printf("%s is waiting on mutex lock:  -----------------------\n", list_array[i].key);
     .      .  347:         //fflush(stdout);
     .      .  348: 
     .      .  349:         list = &(sublist_array[hash(list_array[i].key) % numSublists]);
     .      .  350:         head = &(list->list_head);
     .      .  351: 
     .      .  352:         clock_gettime(CLOCK_MONOTONIC, &spin_start);
     .      .  353:         spin_start_time = spin_start.tv_sec * 1000000000 + spin_start.tv_nsec;
   606    606  354:         while (__sync_lock_test_and_set(&(list->spin_lock), 1))
     2      2  355:             continue;
     .      .  356:         clock_gettime(CLOCK_MONOTONIC, &spin_end);
     .      .  357:         spin_end_time = spin_end.tv_sec * 1000000000 + spin_end.tv_nsec;
     .      .  358:         protected_wait_time += (spin_end_time - spin_start_time);
     .      .  359: 
     .      .  360:         //printf("%s received lock.         -----------------------\n", list_array[i].key);
     .      .  361:         // print2List(&(list.list_head));
     .      .  362: 
     .    117  363:         if (SortedList_delete(SortedList_lookup(head, list_array[i].key)))
     .      .  364:         {
     .      .  365:             fprintf(stderr, "Error deleting element %s!\n", list_array[i].key);
     .      .  366:             free(list_array);
     .      .  367: 	    free(sublist_array);
     .      .  368: 	    exit(2);
     .      .  369:         }
     .      .  370:         __sync_lock_release(&(list->spin_lock));
     .      .  371: 
     .      .  372: 
     .      .  373:     }
     .      .  374: 
     .      .  375: 
     .      .  376: 
     .      .  377: 
     .      .  378: }
---
     .      .  379: 
     .      .  380: int main(int argc, char *argv[])
     .      .  381: {
     .      .  382: 
     .      .  383:     const struct option opts[] =
ROUTINE ====================== listAdd_spin in /u/cs/ugrad/mudith/Documents/CS111Projects/Lab2B/lab2_list.c
  1143   1376 Total samples (flat / cumulative)
     .      .  263:     }
     .      .  264: }
     .      .  265: 
     .      .  266: // Makes and deletes lists, with spin lock
     .      .  267: void listAdd_spin(int *offset)
---
     .      .  268: {
     .      .  269:     struct timespec spin_start, spin_end;
     .      .  270:     long long spin_start_time, spin_end_time;
     .      .  271: 
     .      .  272:     Sublist_t *list;
     .      .  273:     SortedList_t *head;
     .      .  274: 
     .      .  275:     for (int i = *offset; i < numIterations + *offset; i++)
     .      .  276:     {
     .      .  277:         list = &(sublist_array[hash(list_array[i].key) % numSublists]);
     .      .  278:         head = &(list->list_head);
     .      .  279: 
     .      .  280:         //printf("Adding #%d: %s to sublist #%ld\n", i, list_array[i].key, hash(list_array[i].key) % numSublists);
     .      .  281:         //fflush(stdout);
     .      .  282: 
     .      .  283:         //spin lock
     .      .  284:         clock_gettime(CLOCK_MONOTONIC, &spin_start);
     .      .  285:         spin_start_time = spin_start.tv_sec * 1000000000 + spin_start.tv_nsec;
     .      .  286: 
   532    532  287:         while (__sync_lock_test_and_set(&(list->spin_lock), 1))
     3      3  288:             continue;
     .      .  289: 
     .      .  290:         clock_gettime(CLOCK_MONOTONIC, &spin_end);
     .      .  291:         spin_end_time = spin_end.tv_sec * 1000000000 + spin_end.tv_nsec;
     .      .  292:         protected_wait_time += (spin_end_time - spin_start_time);
     .      .  293: 
     .      .  294: 
     .    116  295:         SortedList_insert(head, &list_array[i]);
     .      .  296:         //print2List(head);
     .      .  297: 
     .      .  298: 
     .      .  299: 
     .      .  300:         __sync_lock_release(&(list->spin_lock));
     .      .  301: 
     .      .  302:     }
     .      .  303: 
     .      .  304:     // check length of list
     .      .  305:     int len = 0;
     .      .  306: 
     .      .  307:     for (int i = 0; i < numSublists; i++)
     .      .  308:     {
     .      .  309:         list = &(sublist_array[i]);
     .      .  310:         head = &(list->list_head);
     .      .  311: 
     .      .  312:         clock_gettime(CLOCK_MONOTONIC, &spin_start);
     .      .  313:         spin_start_time = spin_start.tv_sec * 1000000000 + spin_start.tv_nsec;
     .      .  314: 
     .      .  315:         while (__sync_lock_test_and_set(&(list->spin_lock), 1))
     .      .  316:             continue;
     .      .  317: 
     .      .  318:         clock_gettime(CLOCK_MONOTONIC, &spin_end);
     .      .  319:         spin_end_time = spin_end.tv_sec * 1000000000 + spin_end.tv_nsec;
     .      .  320:         protected_wait_time += (spin_end_time - spin_start_time);
     .      .  321: 
     .      .  322:         int temp_len = SortedList_length(head);
     .      .  323: 
     .      .  324:         __sync_lock_release(&(list->spin_lock));
     .      .  325: 
     .      .  326:         if (temp_len < 0)
     .      .  327:         {
     .      .  328:             fprintf(stderr, "Corrupted list!\n");
     .      .  329: 	    free(list_array);
     .      .  330: 	    free(sublist_array);
     .      .  331: 	    exit(2);
     .      .  332:         }
     .      .  333: 
     .      .  334:         len += temp_len;
     .      .  335:     }
     .      .  336: 
     .      .  337: 
     .      .  338: 
     .      .  339:     //delete all added elements
     .      .  340: 
     .      .  341:     for (int i = *offset; i < numIterations + *offset; i++)
     .      .  342:     {
     .      .  343:         //printf("removing #%d: %s\n", i, list_array[i].key);
     .      .  344:         //fflush(stdout);
     .      .  345:         //mutex lock
     .      .  346:         //printf("%s is waiting on mutex lock:  -----------------------\n", list_array[i].key);
     .      .  347:         //fflush(stdout);
     .      .  348: 
     .      .  349:         list = &(sublist_array[hash(list_array[i].key) % numSublists]);
     .      .  350:         head = &(list->list_head);
     .      .  351: 
     .      .  352:         clock_gettime(CLOCK_MONOTONIC, &spin_start);
     .      .  353:         spin_start_time = spin_start.tv_sec * 1000000000 + spin_start.tv_nsec;
   606    606  354:         while (__sync_lock_test_and_set(&(list->spin_lock), 1))
     2      2  355:             continue;
     .      .  356:         clock_gettime(CLOCK_MONOTONIC, &spin_end);
     .      .  357:         spin_end_time = spin_end.tv_sec * 1000000000 + spin_end.tv_nsec;
     .      .  358:         protected_wait_time += (spin_end_time - spin_start_time);
     .      .  359: 
     .      .  360:         //printf("%s received lock.         -----------------------\n", list_array[i].key);
     .      .  361:         // print2List(&(list.list_head));
     .      .  362: 
     .    117  363:         if (SortedList_delete(SortedList_lookup(head, list_array[i].key)))
     .      .  364:         {
     .      .  365:             fprintf(stderr, "Error deleting element %s!\n", list_array[i].key);
     .      .  366:             free(list_array);
     .      .  367: 	    free(sublist_array);
     .      .  368: 	    exit(2);
     .      .  369:         }
     .      .  370:         __sync_lock_release(&(list->spin_lock));
     .      .  371: 
     .      .  372: 
     .      .  373:     }
     .      .  374: 
     .      .  375: 
     .      .  376: 
     .      .  377: 
     .      .  378: }
---
     .      .  379: 
     .      .  380: int main(int argc, char *argv[])
     .      .  381: {
     .      .  382: 
     .      .  383:     const struct option opts[] =
